{
  "name": "databasewebnodeplugin",
  "version": "1.0.236",
  "license": "CC-BY-3.0",
  "description": "A database server, model instance conflict handler, rest api, authentication, session management, schema validator and model relation guarantee for webNode.",
  "homepage": "http://torben.website/databaseWebNodePlugin",
  "documentationWebsite": {
    "name": "databaseWebNodePlugin",
    "trackingCode": "UA-40192634-21"
  },
  "keywords": [
    "api",
    "authentication",
    "authorisation",
    "backend",
    "database",
    "model",
    "rest",
    "roles",
    "session",
    "schema",
    "user",
    "validation",
    "web"
  ],
  "files": [
    "databaseHelper.js",
    "databaseHelper.compiled.js",
    "helper.js",
    "helper.compiled.js",
    "index.js",
    "type.js"
  ],
  "main": "index.compiled.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/databaseWebNodePlugin.git"
  },
  "scripts": {
    "build": "npm run build:databaseHelper && webOptimizer build",
    "build:databaseHelper": "webOptimizer build '{development:{tool:false},injection:{internal:{__evaluate__: \"{databaseHelper: \\\"./databaseHelper\\\"}\"}},inPlace:{externalLibrary:{normal:true}},module:{preprocessor:{javaScript:{options:{plugins:{__remove__:\"transform-runtime\"}}}}}}'",
    "build:dll": "webOptimizer build:dll",
    "clear": "webOptimizer clear && rimraf log.txt",
    "document": "webOptimizer document",
    "lint": "webOptimizer check:type; webOptimizer lint",
    "prepare": "npm run build",
    "report:coverage": "nyc report --reporter=text-lcov | coveralls",
    "serve": "npm run build && webNode",
    "start": "npm run serve",
    "test": "nyc npm run test:plain",
    "test:plain": "webOptimizer test",
    "update": "npm version patch && npm publish",
    "update:documentation": "documentationWebsite --log-level info",
    "watch": "webOptimizer build --watch",
    "watch:dll": "webOptimizer build:dll --watch"
  },
  "dependencies": {
    "clientnode": "^1.0.339",
    "node-fetch": "^2.0.0",
    "pouchdb": "^6.4.3",
    "pouchdb-find": "^6.4.3",
    "pouchdb-server": "^4.0.0"
  },
  "peerDependencies": {
    "babel-runtime": "*",
    "request": "*",
    "web-node": "*"
  },
  "devDependencies": {
    "babel-eslint": "^8.2.2",
    "coveralls": "^3.0.0",
    "documentation-website": "^1.0.100",
    "eslint": "^4.18.0",
    "eslint-config-google": "^0.9.1",
    "eslint-plugin-flowtype": "^2.45.0",
    "eslint-plugin-jsdoc": "^3.4.1",
    "flow-bin": "^0.66.0",
    "jsdoc": "^3.5.2",
    "nyc": "^11.5.0",
    "qunit": "^2.5.0",
    "rimraf": "^2.6.1",
    "source-map-support": "^0.5.3",
    "web-node": "^1.0.151",
    "weboptimizer": "^1.0.514",
    "webpack": "^3.11.0",
    "webpack-dev-server": "^2.10.1"
  },
  "webNode": {
    "database": {
      "binary": {
        "locations": [
          "node_modules/.bin/",
          "../.bin/"
        ],
        "name": "pouchdb-server"
      },
      "configurationFilePath": {
        "__evaluate__": "`./${self.database.path}/database.json`"
      },
      "connector": {
        "ajax": {
          "timeout": {
            "__evaluate__": "5 * 60 * 1000"
          }
        },
        "auto_compaction": true,
        "revs_limit": 100
      },
      "createGenericFlatIndex": true,
      "couch_httpd_auth/timeout": 7200,
      "debug": false,
      "ensureAdminPresence": true,
      "ensureSecuritySettingsPresence": true,
      "ensureUserPresence": true,
      "httpd/host": {
        "__evaluate__": "self.hasOwnProperty('server') ? self.server.application.hostName : '0.0.0.0'"
      },
      "ignoreNoChangeError": true,
      "local": false,
      "log/file": "/dev/stdout",
      "log/level": "info",
      "model": {
        "autoMigrationPath": "migration",
        "entities": {
          "_base": {
            "_allowedRoles": "users",
            "_attachments": {},
            "_deleted": {
              "type": "boolean"
            },
            "_id": {
              "mutable": false
            },
            "_maximumAggregatedSize": 100000000,
            "_minimumAggregatedSize": 0,
            "_rev": {
              "mutable": false
            },
            "-type": {
              "maximumLength": 999,
              "minimumLength": 1,
              "nullable": false,
              "mutable": false,
              "regularExpressionPattern": {
                "__evaluate__": "`(?:${self.database.model.property.name.typeRegularExpressionPattern.public}|${self.database.model.property.name.typeRegularExpressionPattern.private})`"
              }
            }
          },
          "_interval": {
            "_constraintExpressions": [
              {
                "description": "`You have to ensure that start time is before or equal to end time for models with an ${modelName.replace(/^_+/, '')} specification${pathDescription}.`",
                "evaluation": "newDocument.start <= newDocument.end"
              }
            ],
            "end": {
              "declaration": "Ende des Intervals",
              "description": "Ende",
              "nullable": false,
              "type": "DateTime"
            },
            "start": {
              "declaration": "Start des Intervals",
              "description": "Start",
              "nullable": false,
              "type": "DateTime"
            }
          },
          "_timeTrackable": {
            "creationDateTime": {
              "minimum": 1,
              "mutable": false,
              "nullable": false,
              "onCreateExpression": "nowUTCTimestamp",
              "type": "DateTime"
            },
            "updateDateTime": {
              "constraintExpression": {
                "evaluate": {
                  "__evaluate__": "`modelConfiguration.updateStrategy === 'migrate' && oldDocument ? true : newValue > ${nowUTCTimestamp}`"
                }
              },
              "minimum": 0,
              "nullable": false,
              "onUpdateExpression": "modelConfiguration.updateStrategy === 'migrate' && oldDocument ? oldDocument[name] : nowUTCTimestamp",
              "type": "DateTime"
            }
          },
          "_scope": {
            "_additional": {
              "declaration": "Templatedata",
              "description": "Values for template and language specific placeholder.",
              "type": "_stringMapping"
            },
            "parameter": {
              "declaration": "Templateparameter",
              "description": "Template specific option values.",
              "type": "any"
            }
          },
          "_stringMapping": {
            "_additional": {
              "declaration": "Templatedata",
              "description": "Values for template specific placeholder.",
              "emptyEqualsToNull": false,
              "type": "string"
            }
          },
          "_userTrackable": {
            "lastUser": {
              "nullable": false,
              "onUpdateExpression": {
                "__evaluate__": "`userContext.name || '${self.database.user.name}'`"
              }
            }
          }
        },
        "property": {
          "defaultSpecification": {
            "conflictingConstraintExecution": null,
            "conflictingConstraintExpression": null,
            "constraintExecution": null,
            "constraintExpression": null,
            "contentTypeRegularExpressionPattern": null,
            "default": null,
            "emptyEqualsToNull": true,
            "invertedContentTypeRegularExpressionPattern": null,
            "invertedRegularExpressionPattern": null,
            "maximum": null,
            "minimum": null,
            "maximumAggregatedSize": 100000000,
            "minimumAggregatedSize": 0,
            "maximumLength": null,
            "minimumLength": 0,
            "maximumNumber": null,
            "minimumNumber": 0,
            "maximumSize": 10000000,
            "minimumSize": 0,
            "mutable": true,
            "nullable": true,
            "onCreateExecution": null,
            "onCreateExpression": null,
            "onUpdateExecution": null,
            "onUpdateExpression": null,
            "regularExpressionPattern": null,
            "selection": null,
            "trim": true,
            "type": "string",
            "writable": true
          },
          "name": {
            "reserved": [],
            "special": {
              "additional": "_additional",
              "allowedRole": "_allowedRoles",
              "attachment": "_attachments",
              "conflict": "_conflicts",
              "constraint": {
                "execution": "_constraintExecutions",
                "expression": "_constraintExpressions"
              },
              "create": {
                "execution": "_createExecution",
                "expression": "_createExpression"
              },
              "deleted": "_deleted",
              "deletedConflict": "_deleted_conflicts",
              "extend": "_extends",
              "id": "_id",
              "localSequence": "_local_seq",
              "maximumAggregatedSize": "_maximumAggregatedSize",
              "minimumAggregatedSize": "_minimumAggregatedSize",
              "revision": "_rev",
              "revisions": "_revisions",
              "revisionsInformation": "_revs_info",
              "strategy": "_updateStrategy",
              "type": "-type",
              "update": {
                "execution": "_onUpdateExecution",
                "expression": "_onUpdateExpression"
              }
            },
            "typeRegularExpressionPattern": {
              "public": "^[A-Z][A-Za-z0-9]+$",
              "private": "^_[a-z][A-Za-z0-9]+$"
            },
            "validatedDocumentsCache": "_validatedDocuments"
          }
        },
        "updateConfiguration": true,
        "updateStrategy": "fillUp",
        "updateValidation": true
      },
      "path": "database",
      "port": 5984,
      "security": {
        "admins": {
          "names": [
            "readonlyadmin"
          ],
          "roles": [
            "readonlyadmins"
          ]
        },
        "members": {
          "names": [
            "readonlymember"
          ],
          "roles": [
            "readonlymembers",
            "users"
          ]
        }
      },
      "url": {
        "__evaluate__": "`http://{1}${self.database['httpd/host']}:${self.database.port}`"
      },
      "user": {
        "name": "admin",
        "password": "admin"
      }
    }
  },
  "webOptimizer": {
    "assetPattern": {
      "javaScript": {
        "excludeFilePathRegularExpression": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'test' ? '^$' : '.+'"
        }
      }
    },
    "exportFormat": {
      "external": "commonjs2",
      "self": "commonjs2"
    },
    "injection": {
      "internal": {
        "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'test' ? 'test' : {helper: './helper', index: './index'}"
      }
    },
    "module": {
      "aliases": {
        "clientnode/test$": "clientnode/test.compiled",
        "web-node/configurator$": "web-node/configurator.compiled",
        "web-node/pluginAPI$": "web-node/pluginAPI.compiled"
      },
      "optimizer": {
        "babelMinify": {
          "module": {
            "mangle": false,
            "simplify": false
          }
        }
      },
      "skipParseRegularExpressions": {
        "__evaluate__": "/(?:(?:bindings\\/bindings)|(?:colors\\/lib\\/(?:colors)|(?:extendStringPrototype))|(?:encoding\\/lib\\/iconv-loader)|(?:global)|(?:module))\\.js(?:\\?.+|$)/"
      }
    },
    "targetTechnology": "node"
  }
}
