{
  "name": "databasewebnodeplugin",
  "version": "1.0.20",
  "description": "A database server, model instance conflict handler, rest api, authentication, session management, schema validator and model relation guarantee for webNode.",
  "documentationWebsite": {
    "name": "databaseWebNodePlugin",
    "trackingCode": "TODO"
  },
  "homepage": "http://torben.website/databaseWebNodePlugin",
  "license": "CC-BY-3.0",
  "main": "index.compiled.js",
  "files": [
    "index.js",
    "helper.js",
    "helper.compiled.js",
    "type.js"
  ],
  "keywords": [
    "web",
    "backend",
    "rest",
    "api",
    "database",
    "model",
    "schema",
    "validation",
    "authorisation",
    "authentication",
    "user",
    "roles",
    "session"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/databaseWebNodePlugin.git"
  },
  "dependencies": {
    "clientnode": "latest",
    "node-fetch": "latest",
    "pouchdb": "latest",
    "pouchdb-server": "latest",
    "web-node": "latest",
    "weboptimizer": "latest"
  },
  "devDependencies": {
    "documentation-website": "latest",
    "qunit-cli": "latest",
    "source-map-support": "latest"
  },
  "scripts": {
    "build": "webOptimizer build",
    "buildDLL": "webOptimizer buildDLL",
    "clear": "webOptimizer clear && rm --force log.txt &>/dev/null",
    "document": "webOptimizer document",
    "lint": "webOptimizer typeCheck && webOptimizer lint",
    "prepublish": "npm run build",
    "serve": "npm run build && webNode",
    "start": "npm run serve",
    "test": "webOptimizer test",
    "update": "npm version patch && npm publish",
    "updateDocumentation": "documentationWebsite --log-level info",
    "watch": "webOptimizer build --watch",
    "watchDLL": "webOptimizer buildDLL --watch"
  },
  "webNode": {
    "database": {
      "binary": {
        "locations": [
          "node_modules/.bin/",
          "../.bin/"
        ],
        "name": "pouchdb-server"
      },
      "configFilePath": {
        "__evaluate__": "`./${self.database.path}/database.json`"
      },
      "httpd/host": {
        "__evaluate__": "self.hasOwnProperty('server') && self.server.application.hostName || '127.0.0.1'"
      },
      "log/file": "/dev/stdout",
      "log/level": "info",
      "path": "database",
      "port": 5984,
      "security": {
        "admins": {
          "names": [],
          "roles": []
        },
        "members": {
          "names": [],
          "roles": [
            "users"
          ]
        }
      },
      "url": {
        "__evaluate__": "`http://{1}${self.database['httpd/host']}:${self.database.port}`"
      },
      "user": {
        "name": "admin",
        "password": "admin"
      }
    },
    "modelConfiguration": {
      "default": {
        "propertySpecification": {
          "conflictingConstraintExpression": null,
          "conflictingConstraintExecution": null,
          "constraintExpression": null,
          "constraintExecution": null,
          "default": null,
          "maximum": {
            "__evaluate__": "Infinity"
          },
          "minimum": {
            "__evaluate__": "-Infinity"
          },
          "mutable": true,
          "nullable": true,
          "onCreateExpression": null,
          "onCreateExecution": null,
          "onUpdateExpression": null,
          "onUpdateExecution": null,
          "regularExpressionPattern": null,
          "selection": null,
          "type": "string",
          "writable": true
        }
      },
      "reservedPropertyNames": [
        "_deleted",
        "_id",
        "_rev",
        "_revisions"
      ],
      "specialPropertyNames": {
        "allowedRoles": "_allowedRoles",
        "attachments": "_attachments",
        "constraints": {
          "expression": "_constraintExpressions",
          "execution": "_constraintExecutions"
        },
        "extend": "_extends",
        "type": "_type",
        "typeNameRegularExpressionPattern": "^[A-Z][a-z0-9]+$",
        "validatedDocumentsCache": "_validatedDocuments"
      },
      "updateStrategy": "fillUp",
      "models": {
        "_base": {
          "_allowedRoles": [
            "users"
          ],
          "_attachments": {
            "contentTypeRegularExpressionPattern": ".+/.+",
            "maximum": 0,
            "minimum": 0,
            "type": "_attachments"
          },
          "_id": {
            "nullable": false,
            "mutable": false
          },
          "_rev": {
            "nullable": false,
            "writable": false
          },
          "_revisions": {
            "writable": false
          },
          "_type": {
            "regularExpressionPattern": {
              "__evaluate__": "self.modelConfiguration.specialPropertyNames.typeNameRegularExpressionPattern"
            },
            "nullable": false,
            "minimum": 1,
            "maximum": 999,
            "mutable": false
          },
          "creationDateTime": {
            "type": "DateTime",
            "onCreateExpression": "(new Date()).getTime()",
            "minimum": {
              "__evaluate__": "(new Date()).getTime()"
            },
            "mutable": false,
            "nullable": false
          },
          "updateDateType": {
            "type": "DateTime",
            "onUpdateExpression": "(new Date()).getTime()",
            "minimum": {
              "__evaluate__": "(new Date()).getTime()"
            },
            "nullable": false
          },
          "lastUser": {
            "onUpdateExpression": "userContext._id",
            "nullable": false
          }
        }
      }
    }
  },
  "webOptimizer": {
    "module": {
      "aliases": {
        "web-node/configurator$": "web-node/configurator.compiled"
      }
    }
  }
}
