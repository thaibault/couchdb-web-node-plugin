{
  "name": "couchdb-web-node-plugin",
  "version": "1.0.654",
  "description": "A couchdb server, model instance conflict handler, rest api, authentication, session management, schema validator and model relation guarantee for webNode.",
  "keywords": [
    "api",
    "authentication",
    "authorisation",
    "backend",
    "database",
    "model",
    "rest",
    "roles",
    "session",
    "schema",
    "user",
    "validation",
    "web"
  ],
  "homepage": "https://torben.website/couchdb-web-node-plugin",
  "bugs": {
    "email": "info@torben.website",
    "url": "https://github.com/thaibault/couchdb-web-node-plugin/issues"
  },
  "license": "CC-BY-3.0",
  "author": {
    "name": "Torben Sickert",
    "email": "info@torben.website",
    "url": "https://torben.website"
  },
  "files": [
    "databaseHelper.d.ts",
    "databaseHelper.js",
    "helper.d.ts",
    "index.d.ts",
    "index.js",
    "helper.js",
    "type.d.ts",
    "type.js"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/couchdb-web-node-plugin.git"
  },
  "scripts": {
    "build": "weboptimizer build:types && yarn build:databaseHelper && weboptimizer build",
    "build:databaseHelper": "weboptimizer build '{__reference__: \"target:databaseHelper\"}'",
    "check:types": "weboptimizer check:types",
    "clear": "weboptimizer clear && rimraf log.txt",
    "document": "weboptimizer document",
    "lint": "weboptimizer lint",
    "prepare": "yarn build",
    "report:coverage": "nyc report --reporter=text-lcov | coveralls",
    "serve": "yarn build && yarn start",
    "start": "web-node '{plugin: {hotReloading: true}}'",
    "test": "weboptimizer test",
    "test:coverage": "weboptimizer test:coverage",
    "test:coverage:report": "weboptimizer test:coverage:report",
    "update": "yarn version patch && yarn npm publish",
    "update:documentation": "documentation-website",
    "watch": "weboptimizer build --watch"
  },
  "dependencies": {
    "pouchdb-find": "^9.0.0",
    "pouchdb-node": "^9.0.0",
    "pouchdb-server": "^4.2.0"
  },
  "devDependencies": {
    "@babel/eslint-parser": "^7.25.1",
    "@babel/runtime": "^7.25.6",
    "@stylistic/eslint-plugin-ts": "^2.8.0",
    "@types/ejs": "^3.1.5",
    "@types/node": "^22.7.3",
    "@types/pouchdb-node": "^6.1.7",
    "@typescript-eslint/eslint-plugin": "^8.7.0",
    "@typescript-eslint/parser": "^8.7.0",
    "clientnode": "^3.0.1187",
    "documentation-website": "^1.0.332",
    "eslint": "^9.11.1",
    "eslint-config-google": "^0.14.0",
    "eslint-plugin-jsdoc": "^50.3.0",
    "jest": "^29.7.0",
    "jsdoc": "^4.0.3",
    "node-fetch": "^3.3.2",
    "rimraf": "^6.0.1",
    "typescript-eslint": "^8.7.0",
    "web-node": "^1.0.521",
    "weboptimizer": "^2.0.1515"
  },
  "peerDependencies": {
    "@babel/runtime": "*",
    "clientnode": "*",
    "node-fetch": "*",
    "request": "*",
    "web-node": "*"
  },
  "peerDependenciesMeta": {
    "@babel/runtime": {
      "optional": true
    }
  },
  "engines": {
    "node": ">=20",
    "npm": ">=10",
    "yarn": ">=4"
  },
  "resolutions": {
    "colors": "1.4.0",
    "globals@npm:^9.18.0": "patch:globals@npm%3A11.12.0#~/.yarn/patches/globals-npm-11.12.0-1fa7f41a6c.patch",
    "globals@npm:^11.1.0": "patch:globals@npm%3A11.12.0#~/.yarn/patches/globals-npm-11.12.0-1fa7f41a6c.patch",
    "globals@npm:^14.0.0": "patch:globals@npm%3A11.12.0#~/.yarn/patches/globals-npm-11.12.0-1fa7f41a6c.patch"
  },
  "sideEffects": false,
  "documentationWebsite": {
    "name": "couchdb-web-node-plugin",
    "trackingCode": "UA-40192634-21"
  },
  "webNode": {
    "couchdb": {
      "attachAutoRestarter": true,
      "backend": {
        "configuration": {
          "couchdb/database_dir": {
            "__evaluate__": "path.resolve(self.couchdb.path)"
          },
          "couchdb/max_attachment_chunk_size": "4294967296",
          "couchdb/os_process_timeout": "25000",
          "couchdb/view_index_dir": {
            "__evaluate__": "path.resolve(self.couchdb.path)"
          },
          "couch_httpd_auth/timeout": {
            "__evaluate__": "60 ** 2 * 24 * 14"
          },
          "chttpd/require_valid_user": true,
          "httpd/allow_jsonp": true,
          "httpd/bind_address": {
            "__evaluate__": "self.couchdb.backend.configuration['httpd/host']"
          },
          "httpd/enable_cors": true,
          "httpd/host": "0.0.0.0",
          "httpd/port": 5984,
          "log/file": "/dev/stdout",
          "log/level": "info"
        },
        "prefixes": [
          "_node/_local/_config",
          "_config"
        ]
      },
      "binary": {
        "memoryInMegaByte": "default",
        "nodePath": "/usr/bin/node",
        "runner": [
          {
            "adminUserConfigurationPath": "_node/couchdb@127.0.0.1/_config/admins",
            "configurationFile": {
              "content": {
                "__evaluate__": "`[couchdb]\\ndatabase_dir = ${path.resolve(self.couchdb.path)}\\nview_index_dir = ${path.resolve(self.couchdb.path)}`"
              },
              "path": {
                "__evaluate__": "path.resolve(self.couchdb.path, 'local.ini')"
              }
            },
            "environment": {
              "ERL_FLAGS": {
                "__evaluate__": "`-couch_ini /usr/lib/couchdb/etc/default.ini /usr/lib/couchdb/etc/datadirs.ini /etc/couchdb/local.ini ${path.resolve(self.couchdb.path, 'local.ini')}`"
              }
            },
            "location": "/usr/lib/couchdb/bin/",
            "name": "couchdb"
          },
          {
            "adminUserConfigurationPath": "_config/admins",
            "arguments": [
              "--config",
              {
                "__evaluate__": "`./${self.couchdb.path}/database.json`"
              },
              "--dir",
              {
                "__evaluate__": "self.couchdb.backend.configuration['couchdb/database_dir']"
              },
              "#: NOTE: This redundancy seems to be needed to forward ports in docker containers.",
              "--host",
              {
                "__evaluate__": "self.couchdb.backend.configuration['httpd/host']"
              },
              "--port",
              {
                "__evaluate__": "`${self.couchdb.backend.configuration['httpd/port']}`"
              }
            ],
            "location": [
              "node_modules/.bin/",
              "../.bin/"
            ],
            "name": "pouchdb-server"
          }
        ]
      },
      "changesStream": {
        "include_docs": true,
        "live": true,
        "since": "now",
        "timeout": false
      },
      "connector": {
        "fetch": {
          "timeout": {
            "__evaluate__": "5 * 60 * 1000"
          }
        }
      },
      "createGenericFlatIndex": true,
      "databaseName": "main",
      "debug": false,
      "ensureAdminPresence": true,
      "ensureSecuritySettingsPresence": true,
      "ensureUserPresence": true,
      "ignoreNoChangeError": true,
      "local": false,
      "maximumRepresentationLength": 1000,
      "maximumRepresentationTryLength": 1000000,
      "model": {
        "autoMigrationPath": "migration",
        "dateTimeFormat": "iso",
        "entities": {
          "_base": {
            "_allowedRoles": "users",
            "_attachments": {},
            "_deleted": {
              "type": "boolean"
            },
            "_id": {
              "mutable": false
            },
            "_maximumAggregatedSize": 100000000,
            "_minimumAggregatedSize": 0,
            "_rev": {
              "mutable": false
            },
            "-type": {
              "maximumLength": 999,
              "minimumLength": 1,
              "nullable": false,
              "mutable": false,
              "pattern": {
                "__evaluate__": "`(?:${self.couchdb.model.property.name.typePattern.public}|${self.couchdb.model.property.name.typePattern.private})`"
              }
            }
          },
          "_expressionMapping": {
            "_additional": {
              "constraintExecution": {
                "description": "`Given value \"${newValue}\" should be able to be compiled as template string: ${(() => { try { new Function(`return \\`${newValue}\\``) } catch (error) { return `${error}` } })()}`",
                "evaluation": "try { new Function(`return \\`${newValue}\\``) } catch (error) { return false }; return true"
              }
            },
            "_extends": "_stringMapping"
          },
          "_interval": {
            "_constraintExpressions": {
              "description": "`You have to ensure that start time is before or equal to end time for models with an ${modelName.replace(/^_+/, '')} specification${pathDescription}.`",
              "evaluation": "newDocument.start <= newDocument.end"
            },
            "end": {
              "declaration": "Ende des Intervals",
              "description": "Ende",
              "nullable": false,
              "type": "DateTime"
            },
            "start": {
              "declaration": "Start des Intervals",
              "description": "Start",
              "nullable": false,
              "type": "DateTime"
            }
          },
          "_location": {
            "latitude": {
              "declaration": "Latitude degree of the represented position.",
              "description": "Latitude",
              "maximum": 90,
              "minimum": -90,
              "nullable": false,
              "type": [
                "number",
                "UNRESOLVED"
              ]
            },
            "longitude": {
              "declaration": "Longitude degree of the represented position.",
              "description": "Longitude",
              "maximum": 180,
              "minimum": -180,
              "nullable": false,
              "type": [
                "number",
                "UNRESOLVED"
              ]
            }
          },
          "_stringMapping": {
            "_additional": {
              "declaration": "Templatedata",
              "description": "String mapped values.",
              "emptyEqualsNull": false,
              "type": "string"
            }
          },
          "_timeTrackable": {
            "creationDateTime": {
              "minimum": 1,
              "mutable": false,
              "nullable": false,
              "onCreateExpression": "nowUTCTimestamp",
              "type": "DateTime"
            },
            "updateDateTime": {
              "constraintExpression": {
                "evaluate": {
                  "__evaluate__": "`modelConfiguration.updateStrategy === 'migrate' && oldDocument ? true : newValue > ${nowUTCTimestamp}`"
                }
              },
              "minimum": 0,
              "nullable": false,
              "onUpdateExpression": "modelConfiguration.updateStrategy === 'migrate' && oldDocument ? oldDocument[name] : nowUTCTimestamp",
              "type": "DateTime"
            }
          },
          "_userTrackable": {
            "lastUser": {
              "nullable": false,
              "onUpdateExpression": {
                "__evaluate__": "`userContext.name || '${self.couchdb.user.name}'`"
              }
            }
          }
        },
        "property": {
          "defaultSpecification": {
            "emptyEqualsNull": true,
            "maximumAggregatedSize": 100000000,
            "minimumAggregatedSize": 0,
            "minimumLength": 0,
            "minimumNumber": 0,
            "maximumSize": 10000000,
            "minimumSize": 0,
            "mutable": true,
            "nullable": true,
            "trim": true,
            "type": "string",
            "writable": true
          },
          "name": {
            "reserved": [],
            "special": {
              "additional": "_additional",
              "allowedRole": "_allowedRoles",
              "attachment": "_attachments",
              "conflict": "_conflicts",
              "constraint": {
                "execution": "_constraintExecutions",
                "expression": "_constraintExpressions"
              },
              "create": {
                "execution": "_createExecution",
                "expression": "_createExecution"
              },
              "deleted": "_deleted",
              "deletedConflict": "_deleted_conflicts",
              "designDocumentNamePrefix": "_design/",
              "extend": "_extends",
              "id": "_id",
              "localSequence": "_local_seq",
              "maximumAggregatedSize": "_maximumAggregatedSize",
              "minimumAggregatedSize": "_minimumAggregatedSize",
              "oldType": "_oldType",
              "revision": "_rev",
              "revisions": "_revisions",
              "revisionsInformation": "_revs_info",
              "strategy": "_updateStrategy",
              "type": "-type",
              "update": {
                "execution": "_onUpdateExecution",
                "expression": "_onUpdateExpression"
              }
            },
            "typePattern": {
              "private": "^_[a-z][A-Za-z0-9]+$",
              "public": "^[A-Z][A-Za-z0-9]+$"
            },
            "validatedDocumentsCache": "_validatedDocuments"
          }
        },
        "triggerInitialCompaction": true,
        "updateConfiguration": true,
        "updateStrategy": "fillUp",
        "updateValidation": true
      },
      "path": "database",
      "security": {
        "admins": {
          "names": [
            "readonlyadmin"
          ],
          "roles": [
            "readonlyadmins"
          ]
        },
        "members": {
          "names": [
            "readonlymember"
          ],
          "roles": [
            "readonlymembers",
            "users"
          ]
        }
      },
      "skipLatestRevisionDetermining": true,
      "url": {
        "__evaluate__": "`http://{1}${self.couchdb.backend.configuration['httpd/host']}:${self.couchdb.backend.configuration['httpd/port']}`"
      },
      "user": {
        "name": "admin",
        "password": "admin"
      }
    }
  },
  "webOptimizer": {
    "assetPattern": {
      "javaScript": {
        "excludeFilePathRegularExpression": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2].startsWith('test') ? '^$' : '.+'"
        }
      }
    },
    "exportFormat": {
      "external": "commonjs2",
      "self": "commonjs2"
    },
    "injection": {
      "entry": {
        "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2].startsWith('test') ? {testBundle: 'test'} : {helper: './helper', index: './index', type: './type'}"
      }
    },
    "module": {
      "aliases": {
        "#": "Share same library version.",
        "node-fetch$": "pouchdb-node/node_modules/node-fetch/lib/index.js"
      },
      "optimizer": {
        "babelMinify": {
          "bundle": {
            "transform": {
              "#": "To provide a logging output we need to exclude this feature.",
              "removeConsole": false
            }
          },
          "module": {
            "removeConsole": false
          }
        }
      },
      "skipParseRegularExpressions": {
        "__evaluate__": "/(?:(?:bindings\\/bindings)|(?:colors\\/lib\\/(?:colors)|(?:extendStringPrototype))|(?:encoding\\/lib\\/iconv-loader)|(?:global)|(?:module))\\.js(?:\\?.+|$)/"
      }
    },
    "targetTechnology": {
      "boilerplate": "node",
      "payload": "node"
    },
    "target:databaseHelper": {
      "injection": {
        "entry": {
          "__evaluate__": "{databaseHelper: './databaseHelper'}"
        }
      },
      "inPlace": {
        "externalLibrary": {
          "normal": true
        }
      },
      "module": {
        "preprocessor": {
          "javaScript": {
            "options": {
              "plugins": {
                "__remove__": "@babel/plugin-transform-runtime"
              }
            }
          }
        }
      }
    },
    "test": {
      "injection": {
        "external": {
          "implicit": {
            "pattern": {
              "exclude": {
                "#": "NOTE: Theses files are ECMAscript file so have to be processed to work with test-runner.",
                "__append__": [
                  {
                    "__evaluate__": "/^(.+\\/)?data-uri-to-buffer(\\/.+)?$/"
                  },
                  {
                    "__evaluate__": "/^(.+\\/)?fetch-blob(\\/.+)?$/"
                  },
                  {
                    "__evaluate__": "/^(.+\\/)?node-fetch(\\/.+)?$/"
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "packageManager": "yarn@4.1.0+sha256.81a00df816059803e6b5148acf03ce313cad36b7f6e5af6efa040a15981a6ffb"
}
